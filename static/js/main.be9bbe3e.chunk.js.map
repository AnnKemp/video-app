{"version":3,"sources":["components/CardView.js","components/Card.js","components/Footer.js","view/Home.js","App.js","serviceWorker.js","components/upcoming/Upcoming.js","components/Search.js","components/contact/Register.js","components/notfound.js","index.js"],"names":["CardView","props","data","results","map","item","key","id","original_title","src","poster_path","alt","vote_average","overview","Card","useState","setData","useEffect","a","fetch","res","json","Footer","Home","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Upcoming","style","marginTop","movieContext","createContext","MyForm","movie","setMovie","film","Search","response","Provider","value","type","placeholder","className","onChange","event","target","onClick","preventDefault","Register","username","setUsername","age","setAge","myChangeHandler","onSubmit","alert","name","Notfound","ReactDOM","render","StrictMode","activeClassName","to","exact","path","component","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.be9bbe3e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst CardView = (props) => {\n    return (\n        props.data.results.map(item => { // this way I can map all the needed elements instead of one (with two returns nested)\n            return (\n                <figure>\n                    <h1 key={item.id}>{item.original_title}</h1>\n                    <img src={\"https://image.tmdb.org/t/p/original\"+item.poster_path} alt={item.original_title} />\n                    <em>&#10031; {item.vote_average}</em>\n                    <details><summary>Movie description</summary>\n                        {item.overview}\n                    </details>\n                </figure>\n            );\n        })\n    );\n};\n\nexport default CardView;","import React, { useState, useEffect } from 'react';\nimport CardView from \"./CardView\";\n\nconst Card = () => {\n    const [data, setData] = useState({results: []});\n\n    useEffect(() => {\n        (async () => {\n            const res = await fetch(\"https://api.themoviedb.org/3/movie/now_playing?api_key=7e79f7263414fc6a1544c1a5e219faa6\");\n            const data = await res.json();\n            setData(data);\n           // console.log(data.results); // test the outcome\n        })();\n    }, []);\n    //return data;\n    return( // nog eens even checken hoe ik de data van de state hier het beste mee geef als 'props'\n        <CardView data={data} />\n    );\n}\nexport default Card;\n\n/*\n\n// code voorbeelden van hoe ik data moet fetchen\nconst useFetch = (url) => {\nconst [data, setData] = useState(null);\nuseEffect(() => {\n(async () => {\n    const res = await fetch(url);\n    const data = await res.json();\n    setData(data);\n})();\n}, [url]);\nreturn data;\n};\nhttps://dev.to/bdbch/react-hooks-for-data-part-1-fetching-data-28ge\nimport { useEffect, useState } from 'react'\n\n// The hook is just a simple function which we can export\nexport const useFetchBooks = () => {\n\n// First we define the necessary states for our hook\n// this includes book, the loading state and potential errors\nconst [books, setBooks] = useState([])\nconst [loading, setLoading] = useState(false)\nconst [error, setError] = useState(null)\n\n// useEffect can be compared to componentDidMount,\n// componentDidUpdate and componentDidUnmount\n// read more about useEffect here:\n// https://reactjs.org/docs/hooks-effect.html\nuseEffect(() => {\n\n// First we set the loading and error states\nsetLoading(true)\nsetError(null)\n\nfetch('https://library.com/api/books')\n.then(res => res.json())\n.then(json => {\nsetLoading(false)\nif (json.books) {\n  setBooks(json.books)\n} else {\n  setBooks([])\n}\n})\n.catch(err => {\nsetError(err)\nsetLoading(false)\n})\n}, [])\nreturn { books, loading, error }\n}\n*/","import React from \"react\";\n\nfunction Footer() {\n    return (\n        <footer>\n            <p>Made by &copy; Ann Kemp</p>\n        </footer>\n    );\n}\n\nexport default Footer;","import React from 'react';\n/* import Header from \"../components/Header\"; */\nimport Card from \"../components/Card\";\nimport Footer from \"../components/Footer\";\n\nfunction Home() {\n    return (\n        <div>\n\n        <main id=\"box\"><Card /></main>\n        <Footer />\n        </div>\n    );\n}\nexport default Home;\n/* <Header />*/","import React from 'react';\nimport './App.css';\nimport Home from \"./view/Home\";\n\nfunction App() {\n    return(\n        <div>\n            <Home />\n        </div>\n    );\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport CardView from \"../CardView\";\nimport Footer from \"../Footer\";\n\nconst Upcoming = () =>{\n        const [data, setData] = useState({results: []});\n        useEffect(() => {\n            (async () => {\n                const res = await fetch(\"https://api.themoviedb.org/3/movie/upcoming?api_key=7e79f7263414fc6a1544c1a5e219faa6\");\n                const data = await res.json();\n                setData(data);\n            })();\n        }, []);\n        return(\n            <div>\n            <main id=\"box\" style={{marginTop:\"35px\"}}><CardView data={data} /></main>\n            <Footer />\n            </div>\n    );\n}\nexport default Upcoming;","import React, { useState, createContext } from 'react';\n\n// create the context hook\nexport const movieContext= createContext();\n\nconst MyForm= () => {\n    const [movie, setMovie] = useState(\"\"); // here comes the value from the input-field\n    const [data, setData] = useState({results: []}); // here comes the data from the api-search\n\n    let film=\"\"; // initiating let film\n\n    function myChangeHandler(event) { // if you type something in the input-field\n        setMovie(event.target.value);\n    }\n\n    function mySubmitHandler(event){ // if you click on 'search'\n      event.preventDefault(); // normally with a submit-button but ... anyway . . .\n      film=movie;\n      Search();\n    }\n    const Search=() => {\n            if(movie!==\"\") {\n            const url = \"https://api.themoviedb.org/3/search/movie/?api_key=67b347978ffe14fc5d6f8a664a1829f2&query=\";\n            let total = url+film;\n\n                fetch(total)\n                    .then(response => response.json())\n                    .then(data => {\n                       console.log(data);\n                        setData(data);\n                        // adding the data to the movieContext via de provider\n                        return <movieContext.Provider value={data} />; // twijfel eraan of ik dat zo kan schrijven\n                    })\n            }else{}\n    }\n        return (\n                <form>\n                    <input type=\"text\" placeholder=\"Search your movie here\" className=\"complete\" onChange={myChangeHandler} />\n                    <button className=\"send\" onClick={mySubmitHandler}></button>\n            </form>\n        );\n}\nexport default MyForm;","import React, {useState} from 'react';\nimport './form_style.css';\n\nconst Register = () => {\n    const [username, setUsername] = useState(\"\");\n    const [age, setAge] = useState(null);\n// de bedoeling van dit gedoe is om de gegevens te registreren in mijn zelfgemaakte API en dan te gebruiken om in te loggen\n    // en dus de keuze te geven tussen inloggen of registreren en een inlog-venster te maken . . .\n    // maar ik ga eerst die movie search oplossen\n\n    function mySubmitHandler(event){\n        event.preventDefault();\n        alert(\"You are submitting \" + username);\n    }\n    function myChangeHandler(event){\n        setUsername(event.target.value);// how can i give specifications here? get a specific value? or do i have to make all separate functions\n        setAge(event.target.value);\n        /* if (!Number(age)) {\n            alert(\"Your age must be a number\"); */ // still goes a little bit wild\n       // }\n    }\n    return (\n        <div id=\"register\">\n            <h3 id=\"title\">Register and watch what all the movies you want!<br />For just 5 euro's a month!</h3>\n            <form onSubmit={mySubmitHandler}>\n                <h1>Hello {username}, you are {age}</h1>\n                <p>Enter here your name and adress:</p>\n                <input type='text' name='username' placeholder=\"Your name, please\" onChange={myChangeHandler} />\n                <p>Enter your age:</p>\n                <input type='text' name='age' placeholder='Your age, please' onChange={myChangeHandler} />\n\n                <input type='submit' value=\"Register\" />\n            </form>\n        </div>\n    );\n}\nexport default Register;\n\n","import React from 'react'\n\nconst Notfound = () => {\n    return(\n    <header>\n        <h1>Not found</h1>\n    </header>\n    );\n}\n\nexport default Notfound\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    Route,\n    NavLink,\n    BrowserRouter as Router,\n    Switch,\n} from 'react-router-dom'\nimport Upcoming from \"./components/upcoming/Upcoming\";\nimport MyForm from \"./components/Search\";\nimport Register from \"./components/contact/Register\";\nimport Notfound from './components/notfound';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Router>\n          <div>\n          <nav>\n              <ul>\n                  <li>\n                      <NavLink activeClassName=\"active\" to=\"/video-app\">Home</NavLink>\n                  </li>\n                  <li>\n                      <NavLink activeClassName=\"active\" to=\"/components/upcoming/Upcoming\">Upcoming</NavLink>\n                  </li>\n\n                <MyForm />\n              </ul>\n              <Switch>\n                  <Route exact path=\"/video-app\" component={App} />\n              <Route path=\"/components/upcoming/Upcoming\" component={Upcoming} />\n              <Route path=\"/components/contact/Register\" component={Register} />\n              <Route path=\"/components/notfound\" component={Notfound} />\n              </Switch>\n          </nav>\n          </div>\n      </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n/*  <li>\n   <NavLink activeClassName=\"active\" to=\"/components/contact/Register\">Register</NavLink> // voor als ik dat formulier terug ga bijvoegen\n   </li> */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}